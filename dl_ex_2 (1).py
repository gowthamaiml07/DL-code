# -*- coding: utf-8 -*-
"""DL EX:2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KFil9wXQfzekE1SuBuuSNUCNVJX37MRX
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical


(train_images, train_labels), (test_images, test_labels) = mnist.load_data()


train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)


model = models.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3,3), activation='relu'),
    layers.Flatten(),

    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])


model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])


model.fit(train_images, train_labels, epochs=4, batch_size=64, validation_split=0.1)

test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_acc:.4f}")

import numpy as np
import matplotlib.pyplot as plt

# Predict the labels of the test dataset
predictions = model.predict(test_images)

# Convert from one-hot encoding to class index
predicted_labels = np.argmax(predictions, axis=1)
true_labels = np.argmax(test_labels, axis=1)

# Plot the first 15 test images with predicted and true labels
def plot_predictions(images, predicted, true, num=15):
    plt.figure(figsize=(15, 4))
    for i in range(num):
        plt.subplot(1, num, i + 1)
        plt.imshow(images[i].reshape(28, 28), cmap='gray')
        color = 'green' if predicted[i] == true[i] else 'red'
        plt.title(f"P: {predicted[i]}\nT: {true[i]}", color=color)
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# Show predictions
plot_predictions(test_images, predicted_labels, true_labels)

import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist

(train_images, train_labels), (_, _) = mnist.load_data()

def plot_mnist_images(images, labels, num=10):
    plt.figure(figsize=(10, 1))
    for i in range(num):
        plt.subplot(1, num, i+1)
        plt.imshow(images[i], cmap='gray')
        plt.title(f"Label: {labels[i]}")
        plt.axis('off')
    plt.show()

plot_mnist_images(train_images, train_labels, num=10)